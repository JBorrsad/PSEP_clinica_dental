// Configuración
// Usar URL absoluta para que funcione en cualquier entorno
const API_URL = window.location.origin + '/api';

// Variables globales
let currentAppointment = null;
let webSocket = null;
let requestHistory = [];
let adminCalendar = null;

// Obtener token de autenticación
function getAuthToken() {
    return localStorage.getItem('staffToken');
}

// Inicialización del dashboard cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM cargado. Verificando autenticación antes de inicializar dashboard...");
    
    // Verificar autenticación (esto lo manejará auth.js)
    const token = getAuthToken();
    if (!token) {
        console.error("No hay token de autenticación");
        return;
    }
    
    // Iniciar dashboard después de verificar elementos DOM
    setTimeout(initializeDashboard, 100);
});

// Inicializar el panel de administración
function initializeDashboard() {
    console.log("Inicializando dashboard...");
    
    try {
        // Verificar que los elementos del DOM existen
        const requiredContainers = [
            { id: 'adminCalendar', name: 'Calendario' },
            { id: 'requestHistory', name: 'Historial de solicitudes' },
            { id: 'dailyAppointmentsList', name: 'Citas del día' },
            { id: 'pendingRequests', name: 'Solicitudes pendientes' }
        ];
        
        for (const container of requiredContainers) {
            if (!document.getElementById(container.id)) {
                throw new Error(`No se encontró el contenedor: ${container.name} (${container.id})`);
            }
        }
        
        console.log("Verificación de contenedores exitosa");
        
        // Inicializar el calendario
        console.log("Iniciando calendario administrativo...");
        window.adminCalendar = new AdminCalendar('adminCalendar');
        
        if (!window.adminCalendar) {
            throw new Error("Error al crear instancia del calendario");
        }
        
        // Configurar callback para cuando se selecciona una fecha
        window.adminCalendar.setOnDateSelected(function(date) {
            console.log("Fecha seleccionada en calendario:", date);
            loadAppointmentsForDate(date);
        });
        
        // Inicializar calendario
        window.adminCalendar.initialize();
        
        // Configurar secciones colapsables
        setupCollapsibleSections();
        
        // Cargar datos iniciales
        loadPendingRequests();
        loadRequestHistory();
        
        // Configurar WebSocket para notificaciones en tiempo real
        setupWebSocketConnection();
        
        console.log("Dashboard inicializado correctamente");
    } catch (error) {
        console.error("Error al inicializar el dashboard:", error);
        alert("Error al inicializar el panel: " + error.message);
    }
}

// Configurar secciones colapsables en el sidebar
function setupCollapsibleSections() {
    console.log("Configurando secciones colapsables...");
    
    const sections = [
        { header: 'pendingRequestsHeader', content: 'pendingRequests', defaultOpen: true },
        { header: 'requestHistoryHeader', content: 'requestHistory', defaultOpen: false }
    ];
    
    for (const section of sections) {
        const headerEl = document.getElementById(section.header);
        const contentEl = document.getElementById(section.content);
        
        if (!headerEl || !contentEl) {
            console.error(`Sección no encontrada: ${section.header}`);
            continue;
        }
        
        // Configurar evento de clic para alternar sección
        headerEl.addEventListener('click', function() {
            this.classList.toggle('active');
            contentEl.classList.toggle('active');
            
            const isOpen = contentEl.classList.contains('active');
            if (isOpen) {
                contentEl.style.maxHeight = contentEl.scrollHeight + "px";
            } else {
                contentEl.style.maxHeight = null;
            }
        });
        
        // Establecer estado inicial
        if (section.defaultOpen) {
            headerEl.classList.add('active');
            contentEl.classList.add('active');
            contentEl.style.maxHeight = contentEl.scrollHeight + "px";
        }
    }
    
    console.log("Secciones colapsables configuradas correctamente");
}

// Configurar WebSocket para notificaciones en tiempo real
function setupWebSocketConnection() {
    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${wsProtocol}//${window.location.host}/ws`;
    
    console.log(`Conectando a WebSocket: ${wsUrl}`);
    webSocket = new WebSocket(wsUrl);
    
    webSocket.onopen = function() {
        console.log('Conexión WebSocket establecida');
        // Podríamos enviar un mensaje de identificación si fuera necesario
    };
    
    webSocket.onmessage = function(event) {
        console.log('Mensaje recibido:', event.data);
        try {
            const notification = JSON.parse(event.data);
            console.log('Notificación parseada:', notification);
            
            // Procesar la notificación
            if (notification.Action) {
                console.log(`Recibida notificación de tipo ${notification.Action}`);
                
                // Para mensajes de tipo DELETED, recargar la lista de citas inmediatamente
                if (notification.Action === "DELETED") {
                    console.log("ELIMINACIÓN DETECTADA. Recargando lista de citas pendientes...");
                    console.log("Detalles de eliminación:", notification.Data);
                    
                    // Recargar la lista de citas
                    setTimeout(() => {
                        loadPendingRequests();
                        console.log("Lista de citas pendientes recargada después de eliminar");
                    }, 500);
                    
                    // También mostrar una notificación visual
                    showNotification({
                        Action: 'deleted',
                        Data: notification.Data
                    });
                } else {
                    // Para otros tipos de notificaciones
                    loadPendingRequests();
                    
                    // Mostrar notificación visual con el tipo de acción en minúsculas
                    showNotification({
                        Action: notification.Action.toLowerCase(),
                        Data: notification.Data
                    });
                }
            }
        } catch (error) {
            console.error('Error al procesar notificación:', error);
        }
    };
    
    webSocket.onclose = function(event) {
        console.log('Conexión WebSocket cerrada:', event);
        // Reconectar después de un retraso
        setTimeout(setupWebSocketConnection, 5000);
    };
    
    webSocket.onerror = function(error) {
        console.error('Error en WebSocket:', error);
    };
}

// Mostrar notificación visual
function showNotification(notification) {
    let message = '';
    let color = '';
    
    switch(notification.Action) {
        case 'created':
            message = 'Nueva solicitud de cita recibida';
            color = '#4CAF50'; // Verde
            // Reproducir sonido de notificación
            playNotificationSound();
            break;
        case 'updated':
            message = 'Una cita ha sido actualizada';
            color = '#2196F3'; // Azul
            break;
        case 'deleted':
            message = 'Una cita ha sido cancelada';
            color = '#f44336'; // Rojo
            break;
    }
    
    // Crear elemento de notificación
    const notificationElement = document.createElement('div');
    notificationElement.style.position = 'fixed';
    notificationElement.style.top = '20px';
    notificationElement.style.right = '20px';
    notificationElement.style.backgroundColor = color;
    notificationElement.style.color = 'white';
    notificationElement.style.padding = '15px 20px';
    notificationElement.style.borderRadius = '5px';
    notificationElement.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
    notificationElement.style.zIndex = '1000';
    notificationElement.textContent = message;
    
    // Añadir al DOM
    document.body.appendChild(notificationElement);
    
    // Eliminar después de 5 segundos
    setTimeout(() => {
        notificationElement.style.opacity = '0';
        notificationElement.style.transition = 'opacity 0.5s ease';
        setTimeout(() => {
            document.body.removeChild(notificationElement);
        }, 500);
    }, 5000);
}

// Reproducir sonido de notificación
function playNotificationSound() {
    try {
        // Crear un oscilador de audio (beep) para la notificación
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.type = 'sine';
        oscillator.frequency.value = 800; // Frecuencia más alta para un sonido de notificación
        gainNode.gain.value = 0.1; // Volumen bajo
        
        oscillator.start();
        
        // Detener después de 0.2 segundos
        setTimeout(() => {
            oscillator.stop();
            // Reproduzca un segundo beep más bajo para el efecto de notificación
            const oscillator2 = audioContext.createOscillator();
            oscillator2.connect(gainNode);
            oscillator2.type = 'sine';
            oscillator2.frequency.value = 600;
            oscillator2.start();
            setTimeout(() => oscillator2.stop(), 100);
        }, 200);
    } catch (err) {
        console.log('No se pudo reproducir el sonido de notificación', err);
    }
}

// Cargar solicitudes pendientes
async function loadPendingRequests() {
    console.log("Iniciando carga de citas pendientes...");
    try {
        const token = localStorage.getItem('staffToken');
        console.log("Token recuperado de localStorage");
        
        // Añadir un timestamp para evitar la caché
        const timestamp = new Date().getTime();
        const url = `${API_URL}/Appointments/Pending?t=${timestamp}&nocache=${Math.random()}`;
        console.log(`Solicitando citas pendientes al servidor... URL: ${url}`);
        
        const response = await fetch(url, {
            method: 'GET', // Especificar explícitamente el método
            headers: {
                'Authorization': `Bearer ${token}`,
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0'
            },
            cache: 'no-store' // Evitar que el navegador cachee la respuesta
        });

        console.log("Respuesta recibida del servidor:", response.status);
        
        if (response.ok) {
            const appointments = await response.json();
            console.log(`Se recibieron ${appointments.length} citas pendientes`);
            
            // Mostrar IDs de las citas recibidas
            console.log("IDs de citas recibidas:", appointments.map(a => a.id).join(", "));
            
            // Limpiar completamente el container antes de mostrar las citas
            const container = document.getElementById('pendingRequests');
            if (container) {
                container.innerHTML = '';
                console.log("Contenedor de citas pendientes limpiado completamente");
            }
            
            displayAppointments(appointments);
            console.log("Citas mostradas en la interfaz");
        } else {
            const errorText = await response.text();
            console.error(`Error en respuesta: ${response.status} - ${errorText}`);
            throw new Error(`Error al cargar las solicitudes: ${response.status}`);
        }
    } catch (error) {
        console.error('Error detallado:', error);
        alert('Error al cargar las solicitudes');
    }
}

// Mostrar las citas en el dashboard
function displayAppointments(appointments) {
    console.log("Mostrando citas en el dashboard...");
    const container = document.getElementById('pendingRequests');
    
    if (!container) {
        console.error("No se encontró el contenedor 'pendingRequests'");
        return;
    }
    
    console.log("Limpiando contenedor de citas...");
    container.innerHTML = '';

    // Filtrar citas canceladas o inválidas antes de mostrarlas
    const filteredAppointments = appointments.filter(appointment => {
        // Filtrar citas inválidas (sin ID)
        if (!appointment.id) {
            console.log("Ignorando cita inválida sin ID");
            return false;
        }
        
        // Filtrar citas canceladas
        if (appointment.status === 'Cancelada' || appointment.isCanceled) {
            console.log(`Ignorando cita cancelada ID=${appointment.id}`);
            return false;
        }
        
        return true;
    });
    
    console.log(`Filtradas ${appointments.length - filteredAppointments.length} citas canceladas o inválidas`);
    
    if (filteredAppointments.length === 0) {
        console.log("No hay citas pendientes para mostrar");
        container.innerHTML = '<div class="no-requests">No hay solicitudes pendientes</div>';
        return;
    }

    console.log(`Procesando ${filteredAppointments.length} citas para mostrar en la UI`);
    filteredAppointments.forEach((appointment, index) => {
        // Registrar detalles de cada cita
        console.log(`Cita ${index + 1}: ID=${appointment.id}, Paciente=${appointment.patientName}, Estado=${appointment.status}, Confirmada=${appointment.isConfirmed}`);
        
        // Determinar el estado real basado en ambas propiedades
        let status = 'pending';
        let statusText = 'Pendiente';
        
        if (appointment.isConfirmed) {
            status = 'confirmed';
            statusText = 'Confirmada';
        }
        
        const card = document.createElement('div');
        card.className = 'request-card';
        card.dataset.appointmentId = appointment.id; // Añadir el ID como atributo de datos
        card.innerHTML = `
            <div class="status-badge status-${status}">
                ${statusText}
            </div>
            <h3>${appointment.patientName || 'Sin nombre'}</h3>
            <p class="appointment-id">ID: ${appointment.id}</p>
            <p>Fecha: ${new Date(appointment.appointmentDateTime).toLocaleString()}</p>
            <p>Tratamiento: ${appointment.treatmentType || 'No especificado'}</p>
            <p>Teléfono: ${appointment.contactPhone || 'No disponible'}</p>
        `;
        card.onclick = () => openAppointmentModal(appointment);
        container.appendChild(card);
        console.log(`Cita ID ${appointment.id} añadida al DOM`);
    });
    
    console.log("Todas las citas han sido renderizadas");
}

// Abrir modal de cita
function openAppointmentModal(appointment) {
    currentAppointment = appointment;
    const modal = document.getElementById('requestModal');
    
    // Rellenar datos en el modal
    document.getElementById('patientName').value = appointment.patientName;
    document.getElementById('contactPhone').value = appointment.contactPhone;
    
    // Formatear correctamente la fecha para el campo datetime-local
    try {
        const appointmentDate = new Date(appointment.appointmentDateTime);
        if (!isNaN(appointmentDate.getTime())) {
            // Formatear a YYYY-MM-DDThh:mm (formato requerido por datetime-local)
            const localDatetime = appointmentDate.toISOString().slice(0, 16);
            document.getElementById('appointmentDateTime').value = localDatetime;
            console.log("Fecha formateada:", localDatetime);
        } else {
            console.error("Fecha inválida:", appointment.appointmentDateTime);
            document.getElementById('appointmentDateTime').value = "";
        }
    } catch (error) {
        console.error("Error al formatear la fecha:", error);
        document.getElementById('appointmentDateTime').value = "";
    }
    
    document.getElementById('treatmentType').value = appointment.treatmentType;
    document.getElementById('notes').value = appointment.notes || '';

    modal.style.display = 'block';
}

// Cerrar modal
document.querySelector('.close').onclick = function() {
    document.getElementById('requestModal').style.display = 'none';
}

// Manejar acciones de citas
document.getElementById('acceptBtn').onclick = async () => {
    await updateAppointment('confirm');
};

// ELIMINACIÓN EXTREMA - Botón de rechazar
document.getElementById('rejectBtn').onclick = async () => {
    if (!currentAppointment) {
        console.error("No hay una cita seleccionada para cancelar");
        return;
    }
    
    // Confirmar la acción con detalles específicos para asegurar que el usuario entienda
    if (!confirm(`¿ESTÁS SEGURO? Esto ELIMINARÁ PERMANENTEMENTE la cita de ${currentAppointment.patientName} programada para ${new Date(currentAppointment.appointmentDateTime).toLocaleString()}. Esta acción NO SE PUEDE DESHACER.`)) {
        return;
    }
    
    console.log("[ELIMINACIÓN] Iniciando el proceso de cancelación de cita");
    console.log(`[ELIMINACIÓN] Cita a cancelar: ID=${currentAppointment.id}, Paciente=${currentAppointment.patientName}, Fecha=${currentAppointment.appointmentDateTime}`);
    
    // Almacenar el ID de la cita a eliminar
    const citaId = currentAppointment.id;
    const citaNombre = currentAppointment.patientName;
    
    // Obtener el token de autenticación
    const token = localStorage.getItem('staffToken');
    
    try {
        // Cerrar el modal
        document.getElementById('requestModal').style.display = 'none';
        
        // Mostrar mensaje al usuario
        showActionNotification("Cancelando cita...");
        
        // Usar solo el endpoint de cancelación para evitar conflictos
        console.log("[ELIMINACIÓN] Llamando al endpoint Cancel");
        const cancelResponse = await fetch(`${API_URL}/Appointments/${citaId}/Cancel`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0'
            }
        });
        
        if (!cancelResponse.ok) {
            throw new Error(`Error al cancelar la cita: ${cancelResponse.status} ${cancelResponse.statusText}`);
        }
        
        console.log(`[ELIMINACIÓN] Respuesta Cancel: ${cancelResponse.status}`);
        
        // Eliminar la cita del DOM con animación
        console.log("[ELIMINACIÓN] Eliminando del DOM con animación");
        const container = document.getElementById('pendingRequests');
        if (container) {
            // Buscar por ID
            const cards = container.querySelectorAll(`.request-card[data-appointment-id="${citaId}"]`);
            let cardFound = false;
            
            if (cards.length > 0) {
                cards.forEach(card => {
                    // Añadir clase para animación de eliminación
                    card.classList.add('removing');
                    cardFound = true;
                    
                    // Eliminar después de que termine la animación
                    setTimeout(() => {
                        card.remove();
                        console.log(`[ELIMINACIÓN] Card eliminada del DOM: ID=${citaId}`);
                    }, 500);
                });
            }
            
            // Si no se encontró por ID, buscar por contenido
            if (!cardFound) {
                const allCards = container.querySelectorAll('.request-card');
                allCards.forEach(card => {
                    if (card.innerHTML.includes(citaNombre)) {
                        // Añadir clase para animación de eliminación
                        card.classList.add('removing');
                        
                        // Eliminar después de que termine la animación
                        setTimeout(() => {
                            card.remove();
                            console.log(`[ELIMINACIÓN] Card eliminada del DOM (búsqueda por nombre): ${citaNombre}`);
                        }, 500);
                    }
                });
            }
        }
        
        // Mostrar mensaje de éxito
        showActionNotification("Cita cancelada correctamente", "success");
        
        // Recargar las citas pendientes para asegurar que la UI esté actualizada
        setTimeout(() => {
            loadPendingRequests();
        }, 1000);
        
    } catch (error) {
        console.error("[ELIMINACIÓN] Error:", error);
        showActionNotification(`Error: ${error.message}`, "error");
    }
};

document.getElementById('rescheduleBtn').onclick = async () => {
    await updateAppointment('reschedule');
};

// Función para actualizar una cita
async function updateAppointment(action) {
    if (!currentAppointment) return;

    const token = localStorage.getItem('staffToken');
    
    try {
        let url, method, body;
        
        if (action === 'confirm') {
            // Usar el endpoint específico para confirmar
            url = `${API_URL}/Appointments/${currentAppointment.id}/Confirm`;
            method = 'PUT';
            body = null; // No necesitamos enviar datos para confirmar
        } else if (action === 'reject') {
            // Para rechazar/cancelar, USAR DELETE en lugar de PUT para asegurar que se elimine
            url = `${API_URL}/Appointments/${currentAppointment.id}`;  // Usar el endpoint DELETE estándar
            method = 'DELETE';
            body = null;
            console.log(`Cancelando (DELETE) cita ID: ${currentAppointment.id}, Paciente: ${currentAppointment.patientName}`);
            console.log(`Datos de cita a cancelar:`, JSON.stringify(currentAppointment, null, 2));
        } else {
            // Para reprogramar, usamos el endpoint genérico de actualización
            url = `${API_URL}/Appointments/${currentAppointment.id}`;
            method = 'PUT';
            body = JSON.stringify({
                ...currentAppointment,
                appointmentDateTime: document.getElementById('appointmentDateTime').value,
                notes: document.getElementById('notes').value
            });
        }
        
        console.log(`Enviando solicitud ${method} a ${url}`);
        const response = await fetch(url, {
            method: method,
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: body
        });

        if (response.ok) {
            try {
                const responseData = await response.json();
                console.log("Respuesta del servidor:", JSON.stringify(responseData, null, 2));
            } catch (e) {
                console.log("La respuesta no contenía JSON:", e);
            }
            
            document.getElementById('requestModal').style.display = 'none';
            
            if (action === 'reject') {
                console.log("Cita rechazada con éxito. Recargando citas pendientes...");
                
                // Mostrar mensaje de éxito
                alert('Cita rechazada correctamente');
                
                // Recargar las citas con un retraso más largo para asegurar que el servidor ha procesado la cancelación
                setTimeout(() => {
                    console.log("Recargando lista de citas después de cancelación...");
                    loadPendingRequests();
                    console.log("Lista de citas recargada");
                }, 2000);
                
                return; // Salir temprano para evitar el alert duplicado
            }
            
            // Para otras acciones (confirmar, reprogramar)
            setTimeout(() => {
                loadPendingRequests();
                console.log("Lista de citas recargada");
            }, 500);
            
            alert(action === 'confirm' ? 'Cita confirmada' : 'Cita reprogramada');
        } else {
            const errorText = await response.text();
            console.error(`Error al actualizar la cita: ${response.status} - ${errorText}`);
            throw new Error(`Error al actualizar la cita: ${response.status}`);
        }
    } catch (error) {
        console.error('Error detallado:', error);
        alert('Error al actualizar la cita');
    }
}

// Iniciar la conexión WebSocket cuando se carga la página
document.addEventListener('DOMContentLoaded', function() {
    checkAuth();
    setupWebSocketConnection();
});

// Actualizar la lista de citas cada minuto como respaldo por si falla WebSocket
setInterval(loadPendingRequests, 60000);

// Cargar citas para una fecha específica
async function loadAppointmentsForDate(date) {
    console.log("Cargando citas para fecha:", date);
    
    const container = document.getElementById('dailyAppointmentsList');
    if (!container) {
        console.error("Contenedor de citas diarias no encontrado");
        return;
    }
    
    // Mostrar mensaje de carga
    container.innerHTML = `
        <div class="loading-message">
            <i class="fas fa-spinner fa-spin"></i>
            <p>Cargando citas...</p>
        </div>
    `;
    
    try {
        // Formatear fecha si es un objeto Date
        let dateStr = date;
        if (date instanceof Date) {
            dateStr = date.toISOString().split('T')[0];
        }
        
        // Actualizar fecha seleccionada en la interfaz
        const selectedDateEl = document.getElementById('selectedDate');
        if (selectedDateEl) {
            const formattedDate = new Date(dateStr).toLocaleDateString('es-ES', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            selectedDateEl.textContent = formattedDate;
        }
        
        const token = getAuthToken();
        if (!token) {
            throw new Error("No hay token de autenticación");
        }
        
        const response = await fetch(`${API_URL}/Appointments/ForDate/${dateStr}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`Error al cargar citas: ${response.status}`);
        }
        
        const appointments = await response.json();
        console.log("Citas recibidas para fecha:", appointments);
        
        // Mostrar citas
        displayDailyAppointments(appointments, dateStr);
        
    } catch (error) {
        console.error("Error al cargar citas del día:", error);
        container.innerHTML = `
            <div class="error-message">
                <i class="fas fa-exclamation-triangle"></i>
                <p>Error al cargar citas: ${error.message}</p>
                <button onclick="loadAppointmentsForDate('${date}')">Reintentar</button>
            </div>
        `;
    }
}

// Mostrar citas del día en la interfaz
function displayDailyAppointments(appointments, date) {
    console.log("Mostrando citas diarias:", appointments);
    
    const container = document.getElementById('dailyAppointmentsList');
    if (!container) {
        console.error("Contenedor de citas diarias no encontrado");
        return;
    }
    
    if (!Array.isArray(appointments) || appointments.length === 0) {
        container.innerHTML = `
            <div class="empty-message">
                <i class="fas fa-calendar-day"></i>
                <p>No hay citas programadas para este día</p>
            </div>
        `;
        return;
    }
    
    // Ordenar citas por hora
    appointments.sort((a, b) => {
        return new Date(a.appointmentDateTime) - new Date(b.appointmentDateTime);
    });
    
    let html = '<div class="appointments-list">';
    
    appointments.forEach(appointment => {
        // Formatear hora
        const dateTime = new Date(appointment.appointmentDateTime);
        const time = dateTime.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
        
        // Determinar clase según estado
        let statusClass = 'pending';
        let statusText = 'Pendiente';
        
        if (appointment.isConfirmed) {
            statusClass = 'confirmed';
            statusText = 'Confirmada';
        } else if (appointment.isCanceled) {
            statusClass = 'canceled';
            statusText = 'Cancelada';
        }
        
        html += `
            <div class="appointment-item ${statusClass}" onclick="openAppointmentModal(${JSON.stringify(appointment).replace(/"/g, '&quot;')})">
                <div class="appointment-time">${time}</div>
                <div class="appointment-patient">${appointment.patientName}</div>
                <div class="appointment-type">${appointment.treatmentType}</div>
                <div class="appointment-status">${statusText}</div>
                <div class="appointment-actions">
                    <button class="btn-action btn-view">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// Cargar historial de solicitudes
async function loadRequestHistory() {
    console.log("Cargando historial de solicitudes...");
    
    const container = document.getElementById('requestHistory');
    if (!container) {
        console.error("Contenedor de historial no encontrado");
        return;
    }
    
    // Mostrar mensaje de carga
    container.innerHTML = `
        <div class="loading-message">
            <i class="fas fa-spinner fa-spin"></i>
            <p>Cargando historial...</p>
        </div>
    `;
    
    try {
        const token = getAuthToken();
        if (!token) {
            throw new Error("No hay token de autenticación");
        }
        
        const response = await fetch(`${API_URL}/Appointments/History`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`Error al cargar historial: ${response.status}`);
        }
        
        const historyItems = await response.json();
        console.log("Historial recibido:", historyItems);
        
        // Mostrar historial
        displayRequestHistory(historyItems);
        
    } catch (error) {
        console.error("Error al cargar historial:", error);
        container.innerHTML = `
            <div class="error-message">
                <i class="fas fa-exclamation-triangle"></i>
                <p>Error al cargar historial: ${error.message}</p>
                <button onclick="loadRequestHistory()">Reintentar</button>
            </div>
        `;
    }
}

// Mostrar historial de solicitudes en la interfaz
function displayRequestHistory(historyItems) {
    console.log("Mostrando historial de solicitudes:", historyItems);
    
    const container = document.getElementById('requestHistory');
    if (!container) {
        console.error("Contenedor de historial no encontrado");
        return;
    }
    
    if (!Array.isArray(historyItems) || historyItems.length === 0) {
        container.innerHTML = `
            <div class="empty-message">
                <i class="fas fa-history"></i>
                <p>No hay historial de solicitudes</p>
            </div>
        `;
        return;
    }
    
    // Ordenar por fecha más reciente primero
    historyItems.sort((a, b) => {
        // Usar timestamp si está disponible, de lo contrario usar otros campos de fecha
        const dateA = a.timestamp ? new Date(a.timestamp) : 
                     (a.createdAt ? new Date(a.createdAt) : 
                     (a.appointmentDateTime ? new Date(a.appointmentDateTime) : new Date()));
        
        const dateB = b.timestamp ? new Date(b.timestamp) : 
                     (b.createdAt ? new Date(b.createdAt) : 
                     (b.appointmentDateTime ? new Date(b.appointmentDateTime) : new Date()));
        
        return dateB - dateA;
    });
    
    let html = '<div class="history-list">';
    
    historyItems.forEach(item => {
        // Formatear fecha
        const dateTime = item.timestamp ? new Date(item.timestamp) : 
                        (item.createdAt ? new Date(item.createdAt) : 
                        (item.appointmentDateTime ? new Date(item.appointmentDateTime) : new Date()));
        
        const formattedDate = dateTime.toLocaleDateString('es-ES');
        
        // Determinar icono y clase según la acción o estado
        let statusClass = 'pending';
        let statusIcon = 'calendar-check';
        let statusText = 'Pendiente';
        
        // Si es un item de historial con campo action
        if (item.action) {
            statusText = item.action;
            
            if (item.action === 'Confirmada' || item.action === 'Creada' || item.action === 'Aceptada') {
                statusClass = 'confirmed';
                statusIcon = 'calendar-check';
            } else if (item.action === 'Cancelada' || item.action === 'Rechazada') {
                statusClass = 'canceled';
                statusIcon = 'calendar-xmark';
            }
        } 
        // Si es un objeto de cita con campos de estado
        else if (item.isConfirmed !== undefined) {
            if (item.isConfirmed) {
                statusClass = 'confirmed';
                statusIcon = 'calendar-check';
                statusText = 'Confirmada';
            } else if (item.isCanceled) {
                statusClass = 'canceled';
                statusIcon = 'calendar-xmark';
                statusText = 'Cancelada';
            }
        }
        
        // Determinar el nombre del paciente
        const patientName = item.patientName || 'Paciente sin nombre';
        
        // Determinar si se debe mostrar un botón para abrir el modal
        const hasDetails = item.id !== undefined || item.appointmentId !== undefined;
        const clickHandler = hasDetails ? 
            `onclick="openHistoryItemDetails(${JSON.stringify(item).replace(/"/g, '&quot;')})"` : '';
        
        html += `
            <div class="history-item ${statusClass}" ${clickHandler}>
                <div class="history-date">${formattedDate}</div>
                <div class="history-patient">${patientName}</div>
                <div class="history-status">
                    <i class="fas fa-${statusIcon}"></i>
                    ${statusText}
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// Función para mostrar detalles de un elemento del historial
function openHistoryItemDetails(item) {
    console.log("Abriendo detalles del historial:", item);
    
    // Si el item tiene un ID de cita, intentar obtener los detalles completos
    if (item.appointmentId) {
        fetchAppointmentDetails(item.appointmentId);
    } 
    // Si es una cita completa, mostrar directamente
    else if (item.id) {
        openAppointmentModal(item);
    }
}

// Obtener detalles completos de una cita por su ID
async function fetchAppointmentDetails(appointmentId) {
    console.log("Obteniendo detalles de la cita:", appointmentId);
    
    try {
        const token = getAuthToken();
        if (!token) {
            throw new Error("No hay token de autenticación");
        }
        
        const response = await fetch(`${API_URL}/Appointments/${appointmentId}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`Error al obtener detalles de la cita: ${response.status}`);
        }
        
        const appointment = await response.json();
        console.log("Detalles de cita recibidos:", appointment);
        
        // Mostrar la cita en el modal
        openAppointmentModal(appointment);
        
    } catch (error) {
        console.error("Error al obtener detalles de la cita:", error);
        showActionNotification(`Error: ${error.message}`);
    }
}

// Mostrar notificación de acción
function showActionNotification(message, type = 'error') {
    // Eliminar notificaciones previas
    const existingNotifications = document.querySelectorAll('.action-notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // Crear nueva notificación
    const notification = document.createElement('div');
    notification.className = `action-notification ${type}`;
    notification.textContent = message;
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.backgroundColor = type === 'error' ? '#f44336' : '#4CAF50';
    notification.style.color = 'white';
    notification.style.padding = '10px 20px';
    notification.style.borderRadius = '5px';
    notification.style.zIndex = '9999';
    notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
    
    // Añadir al DOM
    document.body.appendChild(notification);
    
    // Eliminar después de 3 segundos
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transition = 'opacity 0.5s';
        setTimeout(() => notification.remove(), 500);
    }, 3000);
}

// Obtener clase CSS según estado
function getStatusClass(appointment) {
    if (appointment.isCanceled) return 'status-canceled';
    if (appointment.isConfirmed) return 'status-confirmed';
    return 'status-pending';
}

// Obtener texto según estado
function getStatusText(appointment) {
    if (appointment.isCanceled) return 'Cancelada';
    if (appointment.isConfirmed) return 'Confirmada';
    return 'Pendiente';
}

// Función de cierre de sesión
function logout() {
    console.log("Cerrando sesión...");
    localStorage.removeItem('authToken');
    window.location.href = 'login.html';
}

// Exponer funciones globalmente para acceso desde HTML
window.openAppointmentModal = openAppointmentModal;
window.closeModal = closeModal;
window.updateAppointment = updateAppointment;
window.loadPendingRequests = loadPendingRequests;
window.loadRequestHistory = loadRequestHistory;
window.loadAppointmentsForDate = loadAppointmentsForDate; 